/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useMemo, useRef } from 'react'
import { TransformControls, useGLTF } from '@react-three/drei'
import { GroupProps, useFrame } from '@react-three/fiber';
import { Group, Object3DEventMap } from 'three';
import { CCDIKHelper, CCDIKSolver, IKS } from 'three-stdlib';

export function Criminal(props: Partial<GroupProps>) {
  const group = useRef<Group<Object3DEventMap>>();
  const { materials, nodes } = useGLTF('/models/player.gltf');
  const mesh = nodes['characterMedium'];

  const {
    iLeftFootCtrl, iLeftFoot, iLeftLeg, iLeftUpLeg,
    iRightFootCtrl, iRightFoot, iRightLeg, iRightUpLeg,
  } = useMemo(() => ({
    // Left
    iLeftFootCtrl: mesh.skeleton.bones.findIndex((bone) => bone.name === 'LeftFootCtrl'),
    iLeftFoot: mesh.skeleton.bones.findIndex((bone) => bone.name === 'LeftFoot'),
    iLeftLeg: mesh.skeleton.bones.findIndex((bone) => bone.name === 'LeftLeg'),
    iLeftUpLeg: mesh.skeleton.bones.findIndex((bone) => bone.name === 'LeftUpLeg'),

    // Right
    iRightFootCtrl: mesh.skeleton.bones.findIndex((bone) => bone.name === 'RightFootCtrl'),
    iRightFoot: mesh.skeleton.bones.findIndex((bone) => bone.name === 'RightFoot'),
    iRightLeg: mesh.skeleton.bones.findIndex((bone) => bone.name === 'RightLeg'),
    iRightUpLeg: mesh.skeleton.bones.findIndex((bone) => bone.name === 'RightUpLeg')
  }), [mesh]);

  const MIN_LEG_ANGLE = 0;
  const MAX_LEG_ANGLE = 15;
  const IK_ITERATION = 1;

  const leftLegIks: IKS[] = [{
    target: iLeftFootCtrl,
    effector: iLeftFoot,
    minAngle: MIN_LEG_ANGLE,
    maxAngle: MAX_LEG_ANGLE,
    iteration: IK_ITERATION,
    links: [
      // { enabled: true, index: iLeftFoot },
      { enabled: true, index: iLeftLeg },
      { enabled: true, index: iLeftUpLeg },
      // { enabled: true, index: iHips },
    ]
  }];

  const rightLegIks: IKS[] = [{
    target: iRightFootCtrl,
    effector: iRightFoot,
    minAngle: MIN_LEG_ANGLE,
    maxAngle: MAX_LEG_ANGLE,
    iteration: IK_ITERATION,
    links: [
      // { enabled: true, index: iLeftFoot },
      {
        enabled: true,
        index: iRightLeg,
        // limitation?: Vector3
        // rotationMin?: Vector3
        // rotationMax?: Vector3
      },
      {
        enabled: true,
        index: iRightUpLeg,
        // limitation?: Vector3
        // rotationMin?: Vector3
        // rotationMax?: Vector3
      },
      // { enabled: true, index: iHips },
    ]
  }];

  const leftLegIkSolver = new CCDIKSolver(mesh, leftLegIks);
  const rightLegIkSolder = new CCDIKSolver(mesh, rightLegIks);
  // const ikHelper = new CCDIKHelper(mesh, iks);

  // setInterval(() => {
  //   leftLegIkSolver.update();
  //   rightLegIkSolder.update();
  // }, 100);

  // useFrame(() => {
  //   leftLegIkSolver.update();
  //   rightLegIkSolder.update();
  // });

  console.log(nodes.characterMedium.skeleton, nodes.characterMedium.geometry);

  return (
    // @ts-ignore
    <group ref={group} {...props} dispose={null}>
      <skeletonHelper args={[mesh]} material-linewidth={2}/>
      <TransformControls mode='translate'>
        <group>
          {/* <primitive object={nodes.LeftFootCtrl} /> */}
          {/* <primitive object={nodes.RightFootCtrl} /> */}
          <primitive object={nodes.HipsCtrl} />
          <skinnedMesh
            castShadow
            geometry={nodes.characterMedium.geometry}
            material={materials['skin.001']}
            receiveShadow
            skeleton={nodes.characterMedium.skeleton}
          />
        </group>
      </TransformControls>
    </group>
  )
}

useGLTF.preload('/models/player.gltf');
